- name: setting server name for {{ component }}
  ansible.builtin.shell: set-hostname "{{ component }}"

- name: disble nodejs module
  ansible.builtin.shell: dnf module disable nodejs -y
  
- name: Install nodejs >= 20
  ansible.builtin.dnf:
    name: nodejs
    state: present
    
    
- name: create user expense
  ansible.builtin.user:
    name: expense

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: /app
    state: directory
    
- name: Download backend code from git repo and storing in temp
  ansible.builtin.get_url:
    url: https://expense-web-app.s3.amazonaws.com/{{ component }}.zip
    dest: /tmp/{{ component }}.zip
    
- name: Extract {{ component }}.zip into html 
  ansible.builtin.unarchive:
    src: /tmp/{{ component }}.zip
    dest: /app
    remote_src: yes

- name: Install {{ component }} node.js package.
  community.general.npm:
    name: "{{ component }}"
    path: /app
    
- name: copy backend file
  ansible.builtin.copy:
    src: backend.service
    dest: /etc/systemd/system/backend.service
    owner: expense
    group: expense
    mode: '0775'
  
- name: installing {{component }} server
  ansible.builtin.package:
    name: mysql-server
    state: present

- name: installing dependecies for mysql
  ansible.builtin.pip:
    name: 
    - PyMySQL
    - cryptography
    executable: pip3.11

- name: injecting schema
  mysql_db:
   name: all
   state: import
   target: /app/schema/backend.sql
   login_host: "{{ SQL_HOST }}"
   login_user: root
   login_password: ExpenseApp@1

# - name: installing {{component }} server
#   ansible.builtin.shell: mysql -h "{{ SQL_HOST }}" -uroot -pExpenseApp@1 < /app/schema/backend.sql

- name: Restart service 
  ansible.builtin.systemd_service:
    state: restarted
    daemon_reload: true
    name: backend
    
   